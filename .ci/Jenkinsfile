pipeline {
	agent { 
		label 						'cc-runner' 
	}
	
	environment { 
		MODULE_NAME 				= 'kms'
		OS_ARCH 					= 'amd64' 
		TF_LOG 						= 'WARN'
		TF_VER 						= '1.8.5'
	}

	stages {
		stage ('Base Dependencies') {
			steps{
				sh 					'''
									wget \
										-q https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_${OS_ARCH}.zip
									unzip \
										-o terraform_${TF_VER}_linux_${OS_ARCH}.zip
									sudo cp \
										-rf terraform /usr/local/bin/
									'''
			}
		}

		stage ('Feature Branch Dependencies') {
			when { expression {env.GIT_BRANCH =~ "origin/feature/*" || env.GIT_BRANCH =~ "origin/*PR*" } }
			steps {
				sh 					'''
									curl \
										-s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
									curl \
										-s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
									'''
			}
		}

		stage ('Master Branch Dependencies') {
			when { expression {env.GIT_BRANCH =~ "origin/master/*" } }
			steps {
				sh 					'''
									curl \
										-Lo ./terraform-docs.tar.gz \
										https://github.com/terraform-docs/terraform-docs/releases/download/v0.18.0/terraform-docs-v0.18.0-$(uname)-amd64.tar.gz
									tar \
										-xzf terraform-docs.tar.gz
									chmod \
										+x terraform-docs
									sudo mv \
										terraform-docs \
										/usr/local/bin/terraform-docs
									'''
			}
		}

		stage ('Lint') {
			when { expression { env.GIT_BRANCH =~ "origin/feature/*" || env.GIT_BRANCH =~ "origin/*PR*" } }
			steps {
				sh 					'''
									tflint \
										-f json \
										--config .ci/.tflint.hcl \
										| tee lint.json
									'''
			}
			post {
				always {
					sh 				'cat lint.json'
				}
			}
		}

		stage ('Sec Scanning') {
			when { expression { env.GIT_BRANCH =~ "origin/feature/*" || env.GIT_BRANCH =~ "origin/*PR*" } }
		    steps {
				sh 					'''
									tfsec . \
										--format json \
										--no-colour \
										--soft-fail \
										| tee sec.json
									'''
			}
			post {
				always {
					sh 				'cat sec.json'
				}
			}
		}

		stage ('Test') {
			when { expression { env.GIT_BRANCH =~ "origin/feature/*" || env.GIT_BRANCH =~ "origin/*PR*" } }
			steps {
				sh 					'''
									terraform init \
										-no-color
									terraform test \
										-test-directory ./.ci/tests \
										-json | tee test.json || true
									'''
			}
			post {
				always {
					sh 				'cat test.json'
				}
			}
		}
		
		stage ('Document') {
			when { expression {e nv.GIT_BRANCH =~ "origin/master/*" } }
			steps {
				sh 					'''
									terraform-docs \
										-c .ci/.tfdocs.yml .
									'''
			}
		}
	}

	post {
        failure {
            emailext body: 			'$BUILD_URL to view the results.',
            	to: 				EMAIL_LIST,
            	subject: 			'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        success {
            emailext body: 			'$BUILD_URL to view the results.',
            	to: 				EMAIL_LIST,
            	subject: 			'Build succeeded in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
    }
}
